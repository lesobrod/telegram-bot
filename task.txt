Общие моменты, которые говорю всем студентам: токена в открытом доступе не должно быть, поскольку любой имеющий токен может получить доступ к вашему боту. Токен должен быть переменной операционной системы.

Подробнее об этом: https://able.bio/rhett/how-to-set-and-get-environment-variables-in-python--274rgt5

Это-же касается ключа rapidapi, который появится в будущем.
И ещё один шаг который нужно сделать. Это разобраться с venv, например, как в нём работать. Поскольку все проекты сейчас работаются в виртуальных окружениях.

Подробнее: https://python-scripts.com/virtualenv

Собственно это следующие два шага что вы сделаете: создадите возможность работать из под виртуального окружения в проекте, и переведёте токен в переменную среды ОС.

Вы будете работать в своем виртуальном окружении. Чтобы ваш проект с легкостью мог запустить каждый - вам необходимо создать файл со всеми установленными для вашего проекта модулями. Это делается так - https://semakin.dev/2020/04/requirements_txt/

Далее, рекомендую ознакомиться с примерами ботов написанных на пайтоне: https://core.telegram.org/bots/samples#python

Следующий момент - следует разбить проект на модули. Т.е. для реквестов бота должен быть отдельный модуль.

Т.е. структура проекта должна принять примерно такой вид:
# TODO как сделать так, чтобы не использовать пременную bot в каждом файле?

├── main.py
└── botrequests/
       └── lowprice.py
Только импортировать из файлов которые также находятся в этой папке нужно через точку.

Т.е. либо

from . import blah
Либо

import .blah
Из модуля более высокоро уровня нужные нам классы таким образом импортируются примерно так:

from blah.some_file import SomeClass
Ну либо так:

import blah.some_file
Также нужно в проект добавить gitignore файл, чтобы системные файлы не кочевали в системе контроля версий - https://gist.github.com/GhostofGoes/94580e76cd251972b15b4821c8a06f59

И также нужен будет файл README.MD в проекте. Он должен быть максимально подробным. Но минимум что он должен содержать это настройку, и взаимодействие с ботом. Т.е. да - все команды.
И обратите кстати внимание на расширение *.MD в имени файла. Это означает что там поддерживается markdown. Рекомендую с ним ознакомиться: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet

Для обеспечения бесперебойного взаимодействия бота с несколькими пользователями:
Первое что нужно сделать - избавиться от глобальных переменных, да и считается их использование плохой практикой (особенно в огромных проектах).

По сути, результат одного пользователя просто перезаписывается другим потоком в одну и ту же переменную, и вот, собственно и такой результат. Решений 2:
- использовать базу данных. Для простых проектов вполне будет достаточно и SQLite. Для каждого пользователя, скажем так, создается своя запись с колонками, куда и записывается результат. Достаточно будет познакомиться с базовыми CRUD (CREATE, READ, UPDATE, DELETE) операциями, то есть подключить базу проще, чем написать основную логику для бота:)
Если не хотите вдаваться в использования баз данных, можно сделать чуть проще - использовать словарь. Ключом выступает идентификатор пользователя, а значение - то что хотите записать.
Пример:

users = {}
...
value = 'Ваше значение'
users.update({message.chat.id: value})
То есть у каждого пользователя есть скажем так, ячейка памяти, куда можно записать результат, и уже по надобности вами извлекать.
Или еще как вариант, можно использовать метод bot.register_next_step_handler, на просторах интернета полно примеров с этим методом.

Можно еще так поступить:
Создайте класс пользователя, если нужно будет, либо храните другим образом данные и сессии пользователей.

Чтиво которое может помочь в этом: https://stackoverflow.com/questions/62697541/how-to-implement-the-simultaneous-use-of-the-telegram-bot-by-multiple-users

Ну и даже базу данных можно завести на условном redis'е. Чтобы хранить сессии и информацию пользователей.

Редис в основном для этого и используется. Хранение оперативных данных.

И исходя из последнего такой совет: глобальные переменные если и используются, то там хранятся только read-only переменные. Т.е. всякие конфиги, перечисления, прочее.

А то студенты пишут бота который способен работать только с одним пользователем, и всё прежде всего из-за глобальных переменных.

Далее, информацию о пользователях пожалуй что в самом классе пользователя можно и хранить, в качестве аттрибута самого класса.

Пример:

class User:
  users = dict()

  def __init__(self, id):
    self.id = id
    User.add_user(id, self)

  @classmethod
  def add_user(cls, id, user):
    cls.users[id] = user
Самый элементарный пример класса пользователя. Пока он хранит в себе только ID, и больше ничего. Ваша задача - расширить его.

Ну и суть этого класса в том что мы храним некую общую информацию о всех объектах класса в самом классе. И нужно доставать нужного пользователя из класса User всякий раз как прилетает новое сообщение.

Для этого нужно имплементировать метод get_user(user_id) в котором происходит одна из следующих вещей: если пользователя нет, то он создаёт его, помещает в словарик, и отправляет ссылку на него нам.

Если пользователь есть, то он достаёт его, и также отправляет ссылку на него.

И получается что каждое сообщение получаемое ботом начинается с того что мы дёргаем нужного пользователя из класса User.

Т.е. примерно так:

@message_handler("blahblah")
def some_message(message):
  user = User.get_user(message.user_id)

Для хранении истории никакие глобальные словари-переменные не стоит использовать. Пишите историю в файл (например с помощью loguru) либо освойте базы данных - sqlite прост в изучении. Вот материал по этому поводу - https://habr.com/ru/post/552788/
Вашим ботом будут пользовать многие люди, а значит для каждого история должна быть уникальной и не должна храниться в коде.

Выбор дат можно делать через календарь - https://github.com/artembakhanov/python-telegram-bot-calendar

Всего доброго!